USE PACT2C276
GO
SET ANSI_NULLS, QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE [dbo].[spPAY_ExtGetAvlblNoofDays10]
	@FromDate [varchar](20) = null,
	@ToDate [varchar](20) = null,
	@EmployeeID [int] = 0,
	@LeaveType [int] = 0,
	@Session [varchar](20) = 'Both',
	@userid [int] = 1,
	@langid [int] = 1
WITH ENCRYPTION, EXECUTE AS CALLER
AS
BEGIN
SET NOCOUNT ON;
DECLARE @NOOFHOLIDAYS INT,@WEEKLYOFFCOUNT INT,@GRADE INT,@INCREXC VARCHAR(50),@ATATIME INT,@MAXLEAVES INT
DECLARE @CurrYearLeavestaken DECIMAL(9,2),@CurrDaterangeLeavestaken DECIMAL(9,2)
DECLARE @FDATE DATETIME,@TDATE DATETIME
DECLARE @CurrMonthOpeningBalance DECIMAL(9,2)
DECLARE @MONTH1 DATETIME,@MONTH2 DATETIME,@MONTH3 DATETIME,@MONTH4 DATETIME,@MONTH5 DATETIME,@MONTH6 DATETIME
DECLARE @MONTH7 DATETIME,@MONTH8 DATETIME,@MONTH9 DATETIME,@MONTH10 DATETIME,@MONTH11 DATETIME,@MONTH12 DATETIME
DECLARE @YEARDIFF INT, @YC INT,@EMPDOJ DATETIME--,@ALStartDate DATETIME,@ALEndDate DATETIME
DECLARE @Year INT,@ALStartMonth INT,@ALStartMonthYear DATETIME,@ALEndMonthYear DATETIME,@ExstAppliedEncashdays DECIMAL(9,2),@PayrollDate DATETIME
DECLARE @LocID INT,@DontConsiderDocs NVARCHAR(10),@DontConsiderDocsDays NVARCHAR(10),@PREVMONTH INT,@NEXTMONTH INT,@HALFDAY FLOAT

DECLARE @MONTHTAB TABLE(ID INT IDENTITY(1,1),STDATE DATETIME,EDDATE DATETIME)

SELECT @DontConsiderDocs=Value From ADM_GlobalPreferences WITH(NOLOCK) WHERE Name='DontConsiderEmpLeavesLoansRecData'
SELECT @DontConsiderDocsDays=Value From ADM_GlobalPreferences WITH(NOLOCK) WHERE Name='DontConsiderEmpLeavesLoansRecDataDays'


----READING START MONTH FROM GLOBAL PREFERENCES
--SELECT @ALStartMonth=ISNULL(VALUE,1) FROM ADM_GlobalPreferences WHERE NAME='LeaveYear'

----SET FIRST DATE TO GIVEN MONTH IN GLOBAL PREFERENCES
--SET @ALStartDate= CONVERT(VARCHAR,@Year)+'-' + DATENAME(MONTH,DATEADD(MONTH,@ALStartMonth,-1))+'-' +'01'
--SET @ALStartDate=CONVERT(DATETIME,@ALStartDate)

----SET LAST DATE TO ENDMONTH FOR THE NEXT YEAR (1YEAR)
--SET @ALEndDate=DATEADD(D,-1,DATEADD(MM,DATEDIFF(M,0,DATEADD(M,11,@ALStartDate))+1,0))
--SET @ALEndDate=CONVERT(DATETIME,@ALEndDate)

SET @PayrollDate=DATEADD(MONTH,DATEDIFF(MONTH,0,CONVERT(DATETIME,@FromDate)),0)

IF((SELECT COUNT(*) FROM ADM_CostCenterDef WITH(NOLOCK) WHERE CostCenterID=50051 and SysColumnName ='CCNID2' and IsColumnInUse=1 and UserProbableValues='H')>0)
	SELECT @LocID=HistoryNodeID FROM COM_HistoryDetails WITH(NOLOCK) WHERE NodeID=@EmployeeID AND CostCenterID=50051 AND HistoryCCID=50002 AND (CONVERT(DATETIME,FromDate)<=CONVERT(DATETIME,@PayrollDate)) AND (CONVERT(DATETIME,ToDate)>=CONVERT(DATETIME,@PayrollDate) OR ToDate IS NULL)
ELSE
	SELECT @LocID=ISNULL(CC.CCNID2,1) FROM COM_CC50051 C51 WITH(NOLOCK),COM_CCCCDATA CC  WITH(NOLOCK) WHERE C51.NODEID=CC.NODEID AND C51.NODEID=@EmployeeID

SELECT @YEARDIFF=DATEDIFF(yyyy,@FromDate,@ToDate)
SET @YC=0
----FOR START DATE AND END DATE OF LEAVEYEAR
EXEC [spPAY_EXTGetLeaveyearDates] @FromDate,@ALStartMonthYear OUTPUT,@ALEndMonthYear OUTPUT
	
IF (isnull(@YEARDIFF,0)=1 and YEAR(@FromDate)<>YEAR(@ToDate))
	SET @YEARDIFF=2

--START : LOADING MONTHS BASED ON GIVEN YEAR RANGE FROM FROMDATE AND TODATE
IF ISNULL(@YEARDIFF,0)>=2
BEGIN
	SET @FDATE=@FromDate
	WHILE(@YC<=@YEARDIFF)
	BEGIN
		IF(@YC=0)
			SET @MONTH1 =@FDATE
		ELSE
			SET @MONTH1 =DATEADD(MONTH,DATEDIFF(MONTH,0,CONVERT(DATETIME, @FDATE)),0)
					
		SET @MONTH2 =DATEADD(D,-1,DATEADD(MM,DATEDIFF(M,0,@FDATE)+2,0))
		SET @MONTH3 = DATEADD(d,1,DATEADD(D,-1,DATEADD(MM,DATEDIFF(M,0,@FDATE)+2,0)))
		SET @MONTH4 =DATEADD(D,-1,DATEADD(MM,DATEDIFF(M,0,@FDATE)+4,0))
		SET @MONTH5 = DATEADD(d,1,DATEADD(D,-1,DATEADD(MM,DATEDIFF(M,0,@FDATE)+4,0)))
		SET @MONTH6 = DATEADD(D,-1,DATEADD(MM,DATEDIFF(M,0,@FDATE)+6,0))
		SET @MONTH7 = DATEADD(d,1,DATEADD(D,-1,DATEADD(MM,DATEDIFF(M,0,@FDATE)+6,0)))
		SET @MONTH8 = DATEADD(D,-1,DATEADD(MM,DATEDIFF(M,0,@FDATE)+8,0))
		SET @MONTH9 = DATEADD(d,1,DATEADD(D,-1,DATEADD(MM,DATEDIFF(M,0,@FDATE)+8,0)))
		SET @MONTH10 = DATEADD(D,-1,DATEADD(MM,DATEDIFF(M,0,@FDATE)+10,0))
		SET @MONTH11 = DATEADD(d,1,DATEADD(D,-1,DATEADD(MM,DATEDIFF(M,0,@FDATE)+10,0)))
		SET @MONTH12 = DATEADD(D,-1,DATEADD(MM,DATEDIFF(M,0,@FDATE)+12,0))
		
		INSERT INTO @MONTHTAB VALUES(@MONTH1,@MONTH2)
		INSERT INTO @MONTHTAB VALUES(@MONTH3,@MONTH4)
		INSERT INTO @MONTHTAB VALUES(@MONTH5,@MONTH6)
		INSERT INTO @MONTHTAB VALUES(@MONTH7,@MONTH8)
		INSERT INTO @MONTHTAB VALUES(@MONTH9,@MONTH10)
		INSERT INTO @MONTHTAB VALUES(@MONTH11,@MONTH12)
		
		SET @FDATE=DATEADD(YY,1,@FDATE)
		
		IF(@FDATE>@ToDate)
			SET @YC=@YEARDIFF
		
	SET @YC=@YC+1
	END
END
ELSE
BEGIN
	SET @MONTH1 =@ALStartMonthYear
	SET @MONTH2 =DATEADD(D,-1,DATEADD(MM,DATEDIFF(M,0,@ALStartMonthYear)+2,0))
	SET @MONTH3 = DATEADD(d,1,DATEADD(D,-1,DATEADD(MM,DATEDIFF(M,0,@ALStartMonthYear)+2,0)))
	SET @MONTH4 =DATEADD(D,-1,DATEADD(MM,DATEDIFF(M,0,@ALStartMonthYear)+4,0))
	SET @MONTH5 = DATEADD(d,1,DATEADD(D,-1,DATEADD(MM,DATEDIFF(M,0,@ALStartMonthYear)+4,0)))
	SET @MONTH6 = DATEADD(D,-1,DATEADD(MM,DATEDIFF(M,0,@ALStartMonthYear)+6,0))
	SET @MONTH7 = DATEADD(d,1,DATEADD(D,-1,DATEADD(MM,DATEDIFF(M,0,@ALStartMonthYear)+6,0)))
	SET @MONTH8 = DATEADD(D,-1,DATEADD(MM,DATEDIFF(M,0,@ALStartMonthYear)+8,0))
	SET @MONTH9 = DATEADD(d,1,DATEADD(D,-1,DATEADD(MM,DATEDIFF(M,0,@ALStartMonthYear)+8,0)))
	SET @MONTH10 = DATEADD(D,-1,DATEADD(MM,DATEDIFF(M,0,@ALStartMonthYear)+10,0))
	SET @MONTH11 = DATEADD(d,1,DATEADD(D,-1,DATEADD(MM,DATEDIFF(M,0,@ALStartMonthYear)+10,0)))
	SET @MONTH12 = DATEADD(D,-1,DATEADD(MM,DATEDIFF(M,0,@ALStartMonthYear)+12,0))
	
	INSERT INTO @MONTHTAB VALUES(@MONTH1,@MONTH2)
	INSERT INTO @MONTHTAB VALUES(@MONTH3,@MONTH4)
	INSERT INTO @MONTHTAB VALUES(@MONTH5,@MONTH6)
	INSERT INTO @MONTHTAB VALUES(@MONTH7,@MONTH8)
	INSERT INTO @MONTHTAB VALUES(@MONTH9,@MONTH10)
	INSERT INTO @MONTHTAB VALUES(@MONTH11,@MONTH12)
END
--END : LOADING MONTHS BASED ON GIVEN YEAR RANGE FROM FROMDATE AND TODATE
--END:FOR START AND END MONTH	

--EMPLOYEE DATE OF JOINING
SELECT @EMPDOJ=CONVERT(DATETIME,DOJ) FROM COM_CC50051 WITH(NOLOCK) WHERE NODEID=@EmployeeID
--FOR Grade
IF((SELECT COUNT(*) FROM ADM_CostCenterDef WITH(NOLOCK) WHERE CostCenterID=50051 and SysColumnName ='CCNID53' and IsColumnInUse=1 and UserProbableValues='H')>0)
BEGIN
	SELECT @Grade=ISNULL(HistoryNodeID,0) FROM COM_HistoryDetails WITH(NOLOCK) WHERE NodeID=@EmployeeID AND CostCenterID=50051 AND HistoryCCID=50053 AND (CONVERT(DATETIME,FromDate)<=CONVERT(DATETIME,@PayrollDate)) AND (CONVERT(DATETIME,ToDate)>=CONVERT(DATETIME,@PayrollDate) OR ToDate IS NULL)
	IF(CONVERT(DATETIME,@EMPDOJ)>CONVERT(DATETIME,@PayrollDate) AND ISNULL(@Grade,0)=0)
		SELECT @Grade=ISNULL(HistoryNodeID,0) FROM COM_HistoryDetails WITH(NOLOCK) WHERE NodeID=@EmployeeID AND CostCenterID=50051 AND HistoryCCID=50053 AND (CONVERT(DATETIME,FromDate)<=CONVERT(DATETIME,@EMPDOJ)) AND (CONVERT(DATETIME,ToDate)>=CONVERT(DATETIME,@EMPDOJ) OR ToDate IS NULL)
END
ELSE
	SELECT @Grade=ISNULL(CCNID53,0) FROM COM_CCCCDATA WITH(NOLOCK) WHERE COSTCENTERID=50051 AND NODEID=@EmployeeID

	IF(@FromDate is not null and @ToDate is not null and isnull(@Session,'Both')='Both')
	BEGIN			
		--INCLUDE OR EXCLUDE HOLIDAYS, ATATIME,MAXLEAVES AND WEEKLYOFFS
		SELECT @INCREXC=ISNULL(INCLUDEREXCLUDE,''),@ATATIME=ISNULL(ATATIME,0),@MAXLEAVES=ISNULL(MAXLEAVES,0) FROM COM_CC50054 WITH(NOLOCK)
		WHERE  GRADEID=@GRADE AND COMPONENTID=@LeaveType AND PAYROLLDATE=(SELECT MAX(PAYROLLDATE) FROM COM_CC50054  WITH(NOLOCK) WHERE CONVERT(DATETIME,PAYROLLDATE)<=CONVERT(DATETIME,@PayrollDate) AND GradeID=@Grade)
				
		--START :CURRENT DATERANGE LEAVES TAKEN
		--START: LOADING DATES FROM @MONTHTAB TABLE		   
		DECLARE @DATESCOUNT TABLE (SNO INT IDENTITY(1,1),ID INT ,DATE1 DATETIME,DAYNAME VARCHAR(50),WEEKNO INT,COUNT INT,NOOFDAYS DECIMAL(9,2),FLAG INT)
		DECLARE @STARTDATE1 DATETIME,@ENDATE1 DATETIME
		DECLARE @MRC AS INT,@MC AS INT,@MID INT
		
		SET @MC=1
		SELECT @MRC=COUNT(*) FROM @MONTHTAB
		WHILE (@MC<=@MRC)
		BEGIN
			SELECT @STARTDATE1=CONVERT(DATETIME,STDATE),@ENDATE1=CONVERT(DATETIME,EDDATE) FROM @MONTHTAB WHERE ID=@MC
			;WITH DATERANGE AS
			(
			SELECT @STARTDATE1 AS DT,1 AS ID
			UNION ALL
			SELECT DATEADD(DD,1,DT),DATERANGE.ID+1 FROM DATERANGE WHERE ID<=DATEDIFF("d",convert(varchar,@STARTDATE1,101),convert(varchar,@ENDATE1,101))
			)
			
			INSERT INTO @DATESCOUNT
			SELECT ROW_NUMBER() OVER (ORDER BY DT) AS ID,DT AS WEEKDATE,DATENAME(DW,DT) AS DAY,0,0,0,0 FROM DATERANGE	--WHERE (DATEPART(DW,DT)=1 OR DATEPART(DW,DT)=7)
		SET @MC=@MC+1
		END
		--END: LOADING DATES FROM @MONTHTAB TABLE	
		--START: LOADING DATA BASED ON FROMDATE AND TODATE GIVEN 
		DECLARE @DATESAPPLIEDCOUNT TABLE (FDATE DATETIME,TDATE DATETIME,STODATE DATETIME,EODATE DATETIME,NOOFDAYS DECIMAL(9,2))
		IF(@DontConsiderDocs='True' AND CONVERT(INT,@DontConsiderDocsDays)>0 )
		BEGIN
			INSERT INTO @DATESAPPLIEDCOUNT
			SELECT CONVERT(DATETIME,dcAlpha4),CONVERT(DATETIME,dcAlpha5),CONVERT(DATETIME,@FromDate),CONVERT(DATETIME,@ToDate),ISNULL(dcAlpha7,0) FROM INV_DOCDETAILS ID WITH(NOLOCK) INNER JOIN COM_DocTextData TD WITH(NOLOCK) ON ID.INVDOCDETAILSID=TD.INVDOCDETAILSID INNER JOIN COM_DocCCData DC WITH(NOLOCK) ON ID.INVDOCDETAILSID=DC.INVDOCDETAILSID
			WHERE  ID.CostCenterID=40062 AND DC.DCCCNID51=@EmployeeID  AND  DC.dcCCNID52=@LeaveType AND ID.STATUSID=369 
			       AND CONVERT(DATETIME,ID.DocDate)< CONVERT(DATETIME,CONVERT(NVARCHAR,(CONVERT(NVARCHAR,@DontConsiderDocsDays) +'-'+ CONVERT(NVARCHAR(3),DATENAME(MONTH,@PayrollDate))+'-'+ CONVERT(NVARCHAR,YEAR(@PayrollDate))))) 
		END
		ELSE IF (@DontConsiderDocs='False')
		BEGIN
		   INSERT INTO @DATESAPPLIEDCOUNT
		   SELECT CONVERT(DATETIME,dcAlpha4),CONVERT(DATETIME,dcAlpha5),CONVERT(DATETIME,@FromDate),CONVERT(DATETIME,@ToDate),ISNULL(dcAlpha7,0) FROM INV_DOCDETAILS ID WITH(NOLOCK) INNER JOIN COM_DocTextData TD WITH(NOLOCK) ON ID.INVDOCDETAILSID=TD.INVDOCDETAILSID INNER JOIN COM_DocCCData DC WITH(NOLOCK) ON ID.INVDOCDETAILSID=DC.INVDOCDETAILSID
		   WHERE  ID.CostCenterID=40062 AND DC.DCCCNID51=@EmployeeID  AND  DC.dcCCNID52=@LeaveType AND ID.STATUSID=369
		END
		--END: LOADING DATA BASED ON FROMDATE AND TODATE GIVEN 			 
		--START: UPDATING @DATESCOUNT TABLE 'COUNT' COLUMN TO 1 FROM LIST OF @DATESAPPLIEDCOUNT TABLE
		DECLARE @RC AS INT,@IC AS INT,@TRC AS INT,@DTT AS DATETIME
		SET @IC=1
		SELECT @TRC=COUNT(*) FROM @DATESCOUNT
		WHILE(@IC<=@TRC)
		BEGIN
			SELECT @DTT=DATE1 FROM @DATESCOUNT WHERE SNO=@IC
			SELECT @RC=COUNT(*) FROM @DATESAPPLIEDCOUNT WHERE CONVERT(DATETIME,@DTT) between CONVERT(DATETIME,FDATE) and CONVERT(DATETIME,TDATE)
		    UPDATE @DATESCOUNT SET COUNT=ISNULL(@RC,0) WHERE CONVERT(DATETIME,DATE1)=CONVERT(DATETIME,@DTT)
		    UPDATE @DATESCOUNT SET FLAG=1 WHERE CONVERT(DATETIME,DATE1)=CONVERT(DATETIME,@DTT) and ISNULL(@RC,0)>0
		SET @IC=@IC+1
		END
		UPDATE DT SET  DT.NOOFDAYS=ISNULL(DAC.NOOFDAYS,0) FROM @DATESCOUNT DT INNER JOIN @DATESAPPLIEDCOUNT DAC ON DT.DATE1=DAC.FDATE AND ISNULL(DAC.NOOFDAYS,0)=0.5
		--END: UPDATING @DATESCOUNT TABLE 'COUNT' COLUMN TO 1 FROM LIST OF @DATESAPPLIEDCOUNT TABLE 
		--END :CURRENT DATERANGE LEAVES TAKEN	
			   
	    --CALCULATE MAXNOOFDAYS
		IF ISNULL(@MAXLEAVES,0)>0
			SET @MAXLEAVES=ISNULL(@MAXLEAVES,0)-ISNULL(@CurrYearLeavestaken,0)
		
		--START HOLIDAYS COUNT
		IF EXISTS(SELECT SYSCOLUMNNAME FROM ADM_COSTCENTERDEF WITH(NOLOCK) WHERE COSTCENTERID=40051 AND ISCOLUMNINUSE=1 AND SYSCOLUMNNAME ='DCCCNID2')
		BEGIN
			SELECT @NOOFHOLIDAYS=COUNT(dcAlpha1) FROM INV_DOCDETAILS ID WITH(NOLOCK) INNER JOIN COM_DocTextData TD WITH(NOLOCK) ON ID.INVDOCDETAILSID=TD.INVDOCDETAILSID INNER JOIN COM_DocCCData CC WITH(NOLOCK) ON ID.INVDOCDETAILSID=CC.INVDOCDETAILSID
			WHERE  ID.COSTCENTERID=40051 and ISDATE(TD.dcAlpha1)=1 AND CC.DCCCNID2=@LocID AND ID.STATUSID=369 AND CONVERT(DATETIME,dcAlpha1) between CONVERT(DATETIME,@FromDate) AND CONVERT(DATETIME,@ToDate)
		END
		ELSE
		BEGIN
			SELECT @NOOFHOLIDAYS=COUNT(dcAlpha1) FROM COM_DocTextData TD WITH(NOLOCK),INV_DOCDETAILS ID WITH(NOLOCK)
			WHERE ID.INVDOCDETAILSID=TD.INVDOCDETAILSID AND ID.COSTCENTERID=40051 AND ID.STATUSID=369 and ISDATE(TD.dcAlpha1)=1	AND CONVERT(DATETIME,dcAlpha1) between CONVERT(DATETIME,@FromDate) AND CONVERT(DATETIME,@ToDate)
		END
		--END HOLIDAYS COUNT
		
		--START WEEKLYOFF COUNT
		----LOADING WEEKLYOFF INFORMATION OF EMPLOYEE
		--DECLARE #EMPWEEKLYOFF TABLE (WK11 varchar(50),WK12 varchar(50),WK21 varchar(50),WK22 varchar(50), WK31 varchar(50),
		--						   WK32 varchar(50),WK41 varchar(50),WK42 varchar(50),WK51 varchar(50),WK52 varchar(50))
		--DECLARE #WEEKLYOFF TABLE (WEEKLYWEEKOFFNO int,DAYNAME varchar(100))										   
								   
		----LOADING DATA FROM WEEKLYOFF MASTER											   
		--INSERT INTO #EMPWEEKLYOFF 
		--SELECT TOP 1 TD.dcAlpha2 WK11,TD.dcAlpha3 WK12,TD.dcAlpha4 WK21,TD.dcAlpha5 WK22,TD.dcAlpha6 WK31,TD.dcAlpha7 WK32,TD.dcAlpha8 WK41,TD.dcAlpha9 WK42,
		--	         TD.dcAlpha10 WK51,TD.dcAlpha11 WK52	FROM COM_DocCCData DC WITH(NOLOCK),INV_DOCDETAILS ID WITH(NOLOCK),COM_DocTextData TD WITH(NOLOCK)
		--WHERE        DC.INVDOCDETAILSID=ID.INVDOCDETAILSID AND TD.INVDOCDETAILSID=ID.INVDOCDETAILSID AND ID.COSTCENTERID=40053 AND DC.dcCCNID51=@EmployeeID	AND
		--             CONVERT(DATETIME,ID.DUEDATE)<=CONVERT(DATETIME,@FromDate)											
		--ORDER BY     CONVERT(DATETIME,ID.DUEDATE) DESC
		
		----CHECKING FOR EMPLOYEE WEEKLY OFF COUNT FROM WEEKLYOFF MASTER IF NO DATA FOUND
		----LOADING DATA FROM EMPLOYEE MASTER
		--IF (SELECT COUNT(*) FROM #EMPWEEKLYOFF)<=0
		--BEGIN
		--	INSERT INTO #EMPWEEKLYOFF 
		--	SELECT WeeklyOff1,WeeklyOff2,WeeklyOff1,WeeklyOff2,WeeklyOff1,WeeklyOff2,WeeklyOff1,WeeklyOff2,
		--	       WeeklyOff1,WeeklyOff2	FROM COM_CC50051 
		--	WHERE  NODEID=@EmployeeID
		--	DELETE FROM #EMPWEEKLYOFF WHERE ISNULL(WK11,'None')='None' OR ISNULL(WK11,'0')='0'
		--END
		
		----CHECKING FOR EMPLOYEE WEEKLY OFF COUNT FROM EMPLOYEE MASTER IF NO DATA FOUND
		--START WEEKLYOFF COUNT
					--LOADING WEEKLYOFF INFORMATION OF EMPLOYEE
					DECLARE @STRQUERY NVARCHAR(MAX),@I INT,@J INT,@COLNAME VARCHAR(15)
					CREATE TABLE #EMPWEEKLYOFF(WK11 varchar(50),WK12 varchar(50),WK21 varchar(50),WK22 varchar(50), WK31 varchar(50),
											   WK32 varchar(50),WK41 varchar(50),WK42 varchar(50),WK51 varchar(50),WK52 varchar(50))
					CREATE TABLE #WEEKLYOFF(WEEKLYWEEKOFFNO int,DAYNAME varchar(100))	
					SET @STRQUERY=''	   
											   
					--LOADING DATA FROM WEEKLYOFF MASTER											   
					INSERT INTO #EMPWEEKLYOFF 
					SELECT TOP 1 TD.dcAlpha2 WK11,TD.dcAlpha3 WK12,TD.dcAlpha4 WK21,TD.dcAlpha5 WK22,TD.dcAlpha6 WK31,TD.dcAlpha7 WK32,TD.dcAlpha8 WK41,TD.dcAlpha9 WK42,
						         TD.dcAlpha10 WK51,TD.dcAlpha11 WK52	FROM COM_DocCCData DC WITH(NOLOCK),INV_DOCDETAILS ID WITH(NOLOCK),COM_DocTextData TD WITH(NOLOCK)
					WHERE        DC.INVDOCDETAILSID=ID.INVDOCDETAILSID AND TD.INVDOCDETAILSID=ID.INVDOCDETAILSID AND ID.COSTCENTERID=40053 AND DC.dcCCNID51=@EmployeeID	AND
					             --CONVERT(DATETIME,ID.DUEDATE)<=CONVERT(DATETIME,@FromDate)
					             CONVERT(DATETIME,ID.DUEDATE)>=CONVERT(DATETIME,@ALStartMonthYear)											
					ORDER BY     CONVERT(DATETIME,ID.DUEDATE) DESC
					
					--SET EMPTY COLUMNS
					SET @I=1
					SET @STRQUERY=''
					WHILE(@I<=5)
					BEGIN
						SET @J=1
						WHILE(@J<=2)
						BEGIN
							SET @COLNAME='WK'+CONVERT(VARCHAR,@I)+CONVERT(VARCHAR,@J)
							SET @STRQUERY=@STRQUERY+' UPDATE #EMPWEEKLYOFF SET '+ @COLNAME +'='''' where '+ @COLNAME +'=''None'''
							
						SET @J=@J+1
						END
					SET @I=@I+1
					END
					--PRINT @STRQUERY
					EXEC sp_executesql @STRQUERY
					--CHECKING FOR EMPLOYEE WEEKLY OFF COUNT FROM WEEKLYOFF MASTER IF NO DATA FOUND
					--LOADING DATA FROM EMPLOYEE MASTER
					IF (SELECT COUNT(*) FROM #EMPWEEKLYOFF)<=0
					BEGIN
						INSERT INTO #EMPWEEKLYOFF 
						SELECT WeeklyOff1,WeeklyOff2,WeeklyOff1,WeeklyOff2,WeeklyOff1,WeeklyOff2,WeeklyOff1,WeeklyOff2,
						       WeeklyOff1,WeeklyOff2	FROM COM_CC50051 WITH(NOLOCK)
						WHERE  NODEID=@EmployeeID
						DELETE FROM #EMPWEEKLYOFF WHERE ISNULL(WK11,'None')='None' OR ISNULL(WK11,'0')='0'
						--EMPLOYEE MASTER
						SET @I=1
						SET @STRQUERY=''
						WHILE(@I<=5)
						BEGIN
							SET @J=1
							WHILE(@J<=2)
							BEGIN
								SET @COLNAME='WK'+CONVERT(VARCHAR,@I)+CONVERT(VARCHAR,@J)
								SET @STRQUERY=@STRQUERY+' UPDATE #EMPWEEKLYOFF SET '+ @COLNAME +'='''' where '+ @COLNAME +'=''None'''
								
							SET @J=@J+1
							END
						SET @I=@I+1
						END
						--PRINT @STRQUERY
						EXEC sp_executesql @STRQUERY
						--GLOBAL PREFERENCE
						SET @I=1
						SET @STRQUERY=''
						WHILE(@I<=5)
						BEGIN
							SET @J=1
							WHILE(@J<=2)
							BEGIN
								SET @COLNAME='WK'+CONVERT(VARCHAR,@I)+CONVERT(VARCHAR,@J)
								SET @STRQUERY=@STRQUERY+' UPDATE #EMPWEEKLYOFF SET '+ @COLNAME +'=isnull(VALUE,'''') FROM ADM_GlobalPreferences WITH(NOLOCK)	WHERE  NAME=''WeeklyOff'+CONVERT(VARCHAR,@J)+''' AND ISNULL('+ @COLNAME +','''')=''''  AND ISNULL(VALUE,''None'')<>''None'''
							SET @J=@J+1
							END
						SET @I=@I+1
						END
						--PRINT @STRQUERY
						EXEC sp_executesql @STRQUERY
					END
					ELSE
					BEGIN
						--EMPLOYEE MASTER
						SET @I=1
						SET @STRQUERY=''
						WHILE(@I<=5)
						BEGIN
							SET @J=1
							WHILE(@J<=2)
							BEGIN
								SET @COLNAME='WK'+CONVERT(VARCHAR,@I)+CONVERT(VARCHAR,@J)
								SET @STRQUERY=@STRQUERY+' UPDATE #EMPWEEKLYOFF SET '+ @COLNAME +'=WeeklyOff'+CONVERT(VARCHAR,@J)+' FROM COM_CC50051 WITH(NOLOCK)	WHERE  NODEID='+CONVERT(VARCHAR,@EmployeeID) +' AND ISNULL('+ @COLNAME +','''')=''''  AND ISNULL(WeeklyOff'+CONVERT(VARCHAR,@J)+',''None'')<>''None'''
							SET @J=@J+1
							END
						SET @I=@I+1
						END
						--PRINT @STRQUERY
						EXEC sp_executesql @STRQUERY
						--GLOBAL PREFRENCE
						SET @I=1
						SET @STRQUERY=''
						WHILE(@I<=5)
						BEGIN
							SET @J=1
							WHILE(@J<=2)
							BEGIN
								SET @COLNAME='WK'+CONVERT(VARCHAR,@I)+CONVERT(VARCHAR,@J)
								SET @STRQUERY=@STRQUERY+' UPDATE #EMPWEEKLYOFF SET '+ @COLNAME +'=isnull(VALUE,'''') FROM ADM_GlobalPreferences WITH(NOLOCK)	WHERE  NAME=''WeeklyOff'+CONVERT(VARCHAR,@J)+''' AND ISNULL('+ @COLNAME +','''')=''''  AND ISNULL(VALUE,''None'')<>''None'''
							SET @J=@J+1
							END
						SET @I=@I+1
						END
						--PRINT @STRQUERY
						EXEC sp_executesql @STRQUERY
					END
					--CHECKING FOR EMPLOYEE WEEKLY OFF COUNT FROM EMPLOYEE MASTER IF NO DATA FOUND
		--LOADING DATA FROM PREFERENCES
		IF (SELECT COUNT(*) FROM #EMPWEEKLYOFF)<=0
		BEGIN
			INSERT INTO #WEEKLYOFF 
			SELECT case isnull(VALUE,'') when '' then 0 else 1 end,VALUE	FROM ADM_GlobalPreferences  WHERE NAME='WeeklyOff1'
			UNION ALL
			SELECT case isnull(VALUE,'') when '' then 0 else 1 end,VALUE	FROM ADM_GlobalPreferences  WHERE NAME='WeeklyOff2'
			UNION ALL
			SELECT case isnull(VALUE,'') when '' then 0 else 2 end,VALUE	FROM ADM_GlobalPreferences  WHERE NAME='WeeklyOff1'
			UNION ALL
			SELECT case isnull(VALUE,'') when '' then 0 else 2 end,VALUE	FROM ADM_GlobalPreferences  WHERE NAME='WeeklyOff2'					  
			UNION ALL
			SELECT case isnull(VALUE,'') when '' then 0 else 3 end,VALUE	FROM ADM_GlobalPreferences  WHERE NAME='WeeklyOff1'
			UNION ALL
			SELECT case isnull(VALUE,'') when '' then 0 else 3 end,VALUE	FROM ADM_GlobalPreferences  WHERE NAME='WeeklyOff2'					  
			UNION ALL
			SELECT case isnull(VALUE,'') when '' then 0 else 4 end,VALUE	FROM ADM_GlobalPreferences  WHERE NAME='WeeklyOff1'
			UNION ALL
			SELECT case isnull(VALUE,'') when '' then 0 else 4 end,VALUE	FROM ADM_GlobalPreferences  WHERE NAME='WeeklyOff2'					  
			UNION ALL
			SELECT case isnull(VALUE,'') when '' then 0 else 5 end,VALUE	FROM ADM_GlobalPreferences  WHERE NAME='WeeklyOff1'
			UNION ALL
			SELECT case isnull(VALUE,'') when '' then 0 else 5 end,VALUE	FROM ADM_GlobalPreferences  WHERE NAME='WeeklyOff2'		
		END
						
		--LOADING WEEKNO AND DAYNAME INTO ROWS FROM #EMPWEEKLYOFF TABLE (WEEKLYOFF AND EMPLOYEE MASTER)
		IF (SELECT COUNT(*) FROM #WEEKLYOFF)<=0
		BEGIN
			INSERT INTO #WEEKLYOFF
				select case isnull(WK11,'') when '' then 0 else 1 end,case isnull(WK11,'') when '' then '' else WK11 end FROM #EMPWEEKLYOFF
			UNION ALL
				select case isnull(WK12,'') when '' then 0 else 1 end,case isnull(WK12,'') when '' then '' else WK12 end FROM #EMPWEEKLYOFF
			UNION ALL
				select case isnull(WK21,'') when '' then 0 else 2 end,case isnull(WK21,'') when '' then '' else WK21 end FROM #EMPWEEKLYOFF
			UNION ALL
				select case isnull(WK22,'') when '' then 0 else 2 end,case isnull(WK22,'') when '' then '' else WK22 end FROM #EMPWEEKLYOFF
			UNION ALL
				select case isnull(WK31,'') when '' then 0 else 3 end,case isnull(WK31,'') when '' then '' else WK31 end FROM #EMPWEEKLYOFF
			UNION ALL
				select case isnull(WK32,'') when '' then 0 else 3 end,case isnull(WK32,'') when '' then '' else WK32 end FROM #EMPWEEKLYOFF
			UNION ALL
				select case isnull(WK41,'') when '' then 0 else 4 end,case isnull(WK41,'') when '' then '' else WK41 end FROM #EMPWEEKLYOFF
			UNION ALL
				select case isnull(WK42,'') when '' then 0 else 4 end,case isnull(WK42,'') when '' then '' else WK42 end FROM #EMPWEEKLYOFF
			UNION ALL
				select case isnull(WK51,'') when '' then 0 else 5 end,case isnull(WK51,'') when '' then '' else WK51 end FROM #EMPWEEKLYOFF
			UNION ALL
				select case isnull(WK52,'') when '' then 0 else 5 end,case isnull(WK52,'') when '' then '' else WK52 end FROM #EMPWEEKLYOFF
		END
		--LOADING WEEKDATE,DAYNAME AND WEEKNO FOR SELECTED DATERANGE
		DECLARE @WEEKOFFCOUNT TABLE (ID INT ,WEEKDATE DATETIME,DAYNAME VARCHAR(50),WEEKNO INT,COUNT INT)
		DECLARE @STARTDATE DATETIME,@STARTDATE2 DATETIME,@ENDATE2 DATETIME
		DECLARE @MRC2 AS INT,@MC2 AS INT,@MID2 INT
		
		SET @MC2=1
		
		SELECT @MRC2=COUNT(*) FROM @MONTHTAB
		WHILE (@MC2<=@MRC2)
		BEGIN
			SELECT @STARTDATE2=CONVERT(DATETIME,STDATE),@ENDATE2=CONVERT(DATETIME,EDDATE) FROM @MONTHTAB WHERE ID=@MC2
			;WITH DATERANGE AS
			(
			SELECT @STARTDATE2 AS DT,1 AS ID
			UNION ALL
			SELECT DATEADD(DD,1,DT),DATERANGE.ID+1 FROM DATERANGE WHERE ID<=DATEDIFF("d",convert(varchar,@STARTDATE2,101),convert(varchar,@ENDATE2,101))
			)
			
			INSERT INTO @WEEKOFFCOUNT
			SELECT ROW_NUMBER() OVER (ORDER BY DT) AS ID,DT AS WEEKDATE,DATENAME(DW,DT) AS DAY,0,0 FROM DATERANGE	--WHERE (DATEPART(DW,DT)=1 OR DATEPART(DW,DT)=7)
		SET @MC2=@MC2+1
		END
			
		--UPDATING WEEKNO IN WEEKOFFCOUNT TABLE BASED ON WEEKDATE OF MONTH
		UPDATE @WEEKOFFCOUNT SET WEEKNO=((datepart(day,WEEKDATE)-1)/7)+1
			
		--UPDATING COUNT TO 1 IF WEEKNO AND DAYNAME IS WEEKLYOFF
		UPDATE WEEKOFFCOUNT SET WEEKOFFCOUNT.count=1 FROM @WEEKOFFCOUNT WEEKOFFCOUNT inner join #WEEKLYOFF WEEKLYOFF on WEEKLYOFF.WEEKLYWEEKOFFNO=WEEKOFFCOUNT.WEEKNO AND upper(WEEKLYOFF.DAYNAME)=upper(WEEKOFFCOUNT.DAYNAME)
			 
		--COUNTING WEEKLYOFFS IN GIVEN DATERANGE
		SELECT @WEEKLYOFFCOUNT=COUNT(*) FROM @WEEKOFFCOUNT WHERE COUNT=1 and convert(DATETIME,WEEKDATE) between CONVERT(DATETIME,@FromDate) and CONVERT(DATETIME,@ToDate)
		--END WEEKLYOFF COUNT

		--START : UPDATING @DATESAPPLIEDCOUNT TABLE 'COUNT' COLUMN TO '3- FOR WEEKLYOFF' AND '4- FOR HOLIDAY'
		
		--UPDATING COUNT TO 3 IF DATEAPPLIEDRANGE DATE IS WEEKLYOFF
		UPDATE DATESCOUNT SET DATESCOUNT.count=3 FROM @WEEKOFFCOUNT WEEKOFFCOUNT inner join @DATESCOUNT DATESCOUNT ON CONVERT(DATETIME,DATESCOUNT.date1)= CONVERT(DATETIME,WEEKOFFCOUNT.weekdate) and WEEKOFFCOUNT.count=1
		--UPDATING COUNT TO 4 IF DATEAPPLIEDRANGE DATE IS HOLIDAY
		IF EXISTS(SELECT SYSCOLUMNNAME FROM ADM_COSTCENTERDEF WITH(NOLOCK) WHERE COSTCENTERID=40051 AND ISCOLUMNINUSE=1 AND SYSCOLUMNNAME ='DCCCNID2')
		BEGIN
			 UPDATE DATESCOUNT SET DATESCOUNT.count=4 FROM @DATESCOUNT DATESCOUNT inner join COM_DocTextData TD on CONVERT(DATETIME,DATESCOUNT.DATE1)=CONVERT(DATETIME,TD.dcAlpha1)
			 inner join INV_DOCDETAILS ID  on  ID.INVDOCDETAILSID=TD.INVDOCDETAILSID inner join COM_DocCCData CC  on  ID.INVDOCDETAILSID=CC.INVDOCDETAILSID
			 and ISDATE(TD.dcAlpha1)=1 AND CC.DCCCNID2=@LocID AND ID.STATUSID=369 AND CONVERT(DATETIME,DATE1) = CONVERT(DATETIME,TD.dcAlpha1) AND ID.COSTCENTERID=40051
		END
		ELSE
		BEGIN
			 UPDATE DATESCOUNT SET DATESCOUNT.count=4 FROM @DATESCOUNT DATESCOUNT inner join COM_DocTextData TD on CONVERT(DATETIME,DATESCOUNT.DATE1)=CONVERT(DATETIME,TD.dcAlpha1)
			 inner join INV_DOCDETAILS ID  on  ID.INVDOCDETAILSID=TD.INVDOCDETAILSID  AND ID.STATUSID=369 and ISDATE(TD.dcAlpha1)=1	 AND CONVERT(DATETIME,DATE1) = CONVERT(DATETIME,TD.dcAlpha1) AND ID.COSTCENTERID=40051
		END	
		--END : UPDATING @DATESAPPLIEDCOUNT TABLE 'COUNT' COLUMN TO '3- FOR WEEKLYOFF' AND '4- FOR HOLIDAY'
		--SET FLAG FOR ACTUAL DAYS
		SET @IC=1
		SELECT @TRC=COUNT(*) FROM @DATESCOUNT
		WHILE(@IC<=@TRC)
		BEGIN
			SELECT @DTT=DATE1 FROM @DATESCOUNT WHERE SNO=@IC
			SELECT @RC=COUNT(*) FROM @DATESAPPLIEDCOUNT WHERE CONVERT(DATETIME,@DTT) between CONVERT(DATETIME,FDATE) and CONVERT(DATETIME,TDATE)
			
			IF ISNULL(@INCREXC,'')='IncludeHolidays' OR ISNULL(@INCREXC,'')='ExcludeWeeklyOffs'
				UPDATE @DATESCOUNT SET FLAG=0 WHERE CONVERT(DATETIME,DATE1)=CONVERT(DATETIME,@DTT) and ISNULL(@RC,0)>0 AND COUNT=3
			ELSE IF ISNULL(@INCREXC,'')='IncludeWeeklyOffs' OR ISNULL(@INCREXC,'')='ExcludeHolidays'
				UPDATE @DATESCOUNT SET FLAG=0 WHERE CONVERT(DATETIME,DATE1)=CONVERT(DATETIME,@DTT) and ISNULL(@RC,0)>0 AND COUNT=4
			ELSE IF ISNULL(@INCREXC,'')='IncludeBoth'
				UPDATE @DATESCOUNT SET FLAG=1 WHERE CONVERT(DATETIME,DATE1)=CONVERT(DATETIME,@DTT) and ISNULL(@RC,0)>0
			ELSE IF ISNULL(@INCREXC,'')='ExcludeBoth'
				UPDATE @DATESCOUNT SET FLAG=0 WHERE CONVERT(DATETIME,DATE1)=CONVERT(DATETIME,@DTT) and ISNULL(@RC,0)>0 AND COUNT IN (3,4)
			
		SET @IC=@IC+1
		END
		--
		SELECT @CurrYearLeavestaken=count(*) from @DATESCOUNT where count=1
		--PRINT 'Current year leaves taken' + CONVERT(VARCHAR,@CurrYearLeavestaken)
		
		--SELECT * FROM @DATESCOUNT
		SELECT @CurrDaterangeLeavestaken=COUNT(*) FROM @DATESCOUNT WHERE convert(DATETIME,date1) between CONVERT(DATETIME,@FromDate) and CONVERT(DATETIME,@ToDate) and flag=1 --and COUNT=1 
		--PRINT 'Current Date range leaves taken' + CONVERT(VARCHAR,@CurrDaterangeLeavestaken)
		
		SELECT @PREVMONTH=COUNT(*) FROM @DATESCOUNT WHERE COUNT=1 and (convert(DATETIME,@FromDate)) > (CONVERT(DATETIME,date1))
		--PRINT 'Previous month taken leaves' + CONVERT(VARCHAR,@PREVMONTH)
		
		SELECT @NEXTMONTH=COUNT(*) FROM @DATESCOUNT WHERE COUNT=1 and (convert(DATETIME,@FromDate)) <(CONVERT(DATETIME,date1) )
		--PRINT 'Next month taken leaves'+ CONVERT(VARCHAR,@NEXTMONTH)
		
		IF ISNULL(@NEXTMONTH,0)=0 AND ISNULL(@PREVMONTH,0)=0
			SET @CurrMonthOpeningBalance=@CurrDaterangeLeavestaken
		ELSE IF ISNULL(@NEXTMONTH,0)>0 AND ISNULL(@PREVMONTH,0)>0
			SET @CurrMonthOpeningBalance=@PREVMONTH
		ELSE IF ISNULL(@NEXTMONTH,0)=0 AND ISNULL(@PREVMONTH,0)>0
			SET @CurrMonthOpeningBalance=@PREVMONTH
		ELSE IF ISNULL(@NEXTMONTH,0)>0 AND ISNULL(@PREVMONTH,0)=0
			SET @CurrMonthOpeningBalance=0
			
		--PRINT 'Current month opening balance'+ CONVERT(VARCHAR,isnull(@CurrMonthOpeningBalance,0))
		--END : DATEAPPLIEDRANGE COUNT UPDATE
		
		--START : CHECKING AVAILABLE DAYS 
		DECLARE @AssignedLeavesOP INT,@AvlblLeavesOP DECIMAL(9,2) ,@FromDateOP DATETIME,@ToDateOP DATETIME
		EXEC spPAY_ExtGetAssignedLeavesOP  @EmployeeID,@LeaveType,@ToDate,@UserId,@LangId,@AssignedLeavesOP output,@AvlblLeavesOP output,@FromDateOP output,@ToDateOP output,@ExstAppliedEncashdays output
		--PRINT 'Available days ' + CONVERT(VARCHAR,@AvlblLeavesOP) + 'Encash days ' +CONVERT(VARCHAR,@ExstAppliedEncashdays)
		--END: CHECKING AVAILABLE DAYS 
		
		--Available leaves
		SET @AvlblLeavesOP=@AvlblLeavesOP-isnull(@CurrMonthOpeningBalance,0)
						
		SET @CurrDaterangeLeavestaken=ISNULL(@CurrDaterangeLeavestaken,0)+ISNULL(@ExstAppliedEncashdays,0)
		--PRINT 'Current Date range leaves taken after adding Encash days ' + CONVERT(VARCHAR,@CurrDaterangeLeavestaken)
		
		--START :COUNTING THE HALFDAY COUNT
		SET @HALFDAY=0
		SELECT @HALFDAY=ISNULL(SUM(NOOFDAYS),0) FROM @DATESCOUNT WHERE COUNT=1 AND NOOFDAYS=0.5 and convert(datetime,date1) between convert(datetime,@FromDate) and convert(datetime,@ToDate)
		IF(ISNULL(@CurrDaterangeLeavestaken,0)>0)
			SET @CurrDaterangeLeavestaken=isnull(@CurrDaterangeLeavestaken,0)-isnull(@HALFDAY,0)
		
		--PRINT 'Current Date range leaves taken after deducting the half days count'
		PRINT @CurrDaterangeLeavestaken
		
		SET @HALFDAY=0
		SELECT @HALFDAY=ISNULL(SUM(NOOFDAYS),0) FROM @DATESCOUNT WHERE COUNT=1 AND NOOFDAYS=0.50
		IF(isnull(@CurrYearLeavestaken,0)>0)
			SET @CurrYearLeavestaken=isnull(@CurrYearLeavestaken,0)-isnull(@HALFDAY,0)
		 
		PRINT 'Current year leaves taken after deducting the half days countT'
		PRINT @CurrYearLeavestaken
		PRINT @INCREXC
		--END :COUNTING THE HALFDAY COUNT
		DROP TABLE #EMPWEEKLYOFF
		DROP TABLE #WEEKLYOFF
		
		IF ISNULL(@INCREXC,'')='IncludeHolidays' OR ISNULL(@INCREXC,'')='ExcludeWeeklyOffs'
			SELECT CONVERT(DATETIME,@FromDate) as FromDate,CONVERT(DATETIME,@ToDate) as ToDate,@AvlblLeavesOP AvailableLeaves,convert(varchar,@CurrDaterangeLeavestaken) as LeavesTaken,@NOOFHOLIDAYS Holidays,@WEEKLYOFFCOUNT Weeklyoff,@CurrYearLeavestaken TotalLeavestaken
		ELSE IF ISNULL(@INCREXC,'')='IncludeWeeklyOffs' OR ISNULL(@INCREXC,'')='ExcludeHolidays'
			SELECT CONVERT(DATETIME,@FromDate) as FromDate,CONVERT(DATETIME,@ToDate) as ToDate,@AvlblLeavesOP AvailableLeaves,convert(varchar,@CurrDaterangeLeavestaken) as LeavesTaken,@NOOFHOLIDAYS Holidays,@WEEKLYOFFCOUNT Weeklyoff,@CurrYearLeavestaken TotalLeavestaken
		ELSE IF ISNULL(@INCREXC,'')='IncludeBoth'
			SELECT CONVERT(DATETIME,@FromDate) as FromDate,CONVERT(DATETIME,@ToDate) as ToDate,@AvlblLeavesOP AvailableLeaves,convert(varchar,@CurrDaterangeLeavestaken) as LeavesTaken,@NOOFHOLIDAYS Holidays,@WEEKLYOFFCOUNT Weeklyoff,@CurrYearLeavestaken TotalLeavestaken
		ELSE IF ISNULL(@INCREXC,'')='ExcludeBoth'
			SELECT CONVERT(DATETIME,@FromDate) as FromDate,CONVERT(DATETIME,@ToDate) as ToDate,@AvlblLeavesOP AvailableLeaves,convert(varchar,@CurrDaterangeLeavestaken) as LeavesTaken,@NOOFHOLIDAYS Holidays,@WEEKLYOFFCOUNT Weeklyoff,@CurrYearLeavestaken TotalLeavestaken
	END	
	ELSE IF ISNULL(@Session,'')='Session1' OR ISNULL(@Session,'')='Session2'
	BEGIN
		SET @ToDate=@FromDate
		SELECT CONVERT(DATETIME,@FromDate) as FromDate,CONVERT(DATETIME,@ToDate) as ToDate,@AvlblLeavesOP AvailableLeaves,convert(varchar,@CurrDaterangeLeavestaken) as LeavesTaken,@NOOFHOLIDAYS Holidays,@WEEKLYOFFCOUNT Weeklyoff,@CurrYearLeavestaken TotalLeavestaken
	END
END
GO
