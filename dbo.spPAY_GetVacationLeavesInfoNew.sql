USE PACT2C276
GO
SET ANSI_NULLS, QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE [dbo].[spPAY_GetVacationLeavesInfoNew]
	@FromDate [varchar](20) = null,
	@ToDate [varchar](20) = null,
	@EmployeeID [int] = 0,
	@userid [int] = 1,
	@langid [int] = 1,
	@RptMode [int] = 0,
	@LeavesTakenOP [decimal](9, 2) OUTPUT,
	@LeavesTakenEncash [decimal](9, 2) OUTPUT
WITH ENCRYPTION, EXECUTE AS CALLER
AS
BEGIN
SET NOCOUNT ON;

DECLARE @FDATE DATETIME,@TDATE DATETIME,@GRADE INT,@GRADEWISEVACATIONPREF nVARCHAR(10)
DECLARE @MWKOFFS FLOAT,@MHDAYS FLOAT

--Get Vacation LeaveType Component ID	
DECLARE @ExcludeWeeklyOffsasVacation VARCHAR(3),@ExcludeHolidaysasVacation VARCHAR(3),@VacationLeaveType INT
DECLARE @TabDatesRange TABLE (SNO INT IDENTITY(1,1),ID INT ,DATE1 DATETIME,DAYNAME VARCHAR(50),WEEKNO INT,COUNT INT,NOOFDAYS Float,FLAG INT,IncExc varchar(5))
DECLARE @STARTDATE1 DATETIME,@ENDATE1 DATETIME
DECLARE @LocID INT,@PayrollDate DATETIME, @INCREXC VARCHAR(50),@VacationLeaveTypeName NVARCHAR(500)

--SET TO FIRST DAY FOR THE GIVEN DATE
SET @PayrollDate=DATEADD(MONTH,DATEDIFF(MONTH,0,CONVERT(DATETIME,@FromDate)),0)
IF((SELECT COUNT(CostCenterID) FROM ADM_CostCenterDef WITH(NOLOCK) WHERE CostCenterID=50051 and SysColumnName ='CCNID2' and IsColumnInUse=1 and UserProbableValues='H')>0)
	SELECT @LocID=HistoryNodeID FROM COM_HistoryDetails WITH(NOLOCK) WHERE NodeID=@EmployeeID AND CostCenterID=50051 AND HistoryCCID=50002 AND (FromDate<=CONVERT(FLOAT,CONVERT(DATETIME,@PayrollDate))) AND (ToDate>=CONVERT(FLOAT,CONVERT(DATETIME,@PayrollDate)) OR ToDate IS NULL)
ELSE
	SELECT @LocID=ISNULL(CC.CCNID2,1) FROM COM_CC50051 C51 WITH(NOLOCK),COM_CCCCDATA CC  WITH(NOLOCK) WHERE C51.NODEID=CC.NODEID AND C51.NODEID=@EmployeeID

--START: CHECKING GRADE
SELECT @GradewiseVacationPref=ISNULL(VALUE,'False') FROM ADM_GlobalPreferences WITH(NOLOCK) WHERE NAME='GradeWiseVacation'
IF (@GRADEWISEVACATIONPREF='True')
BEGIN
	IF((SELECT COUNT(CostCenterID) FROM ADM_CostCenterDef WITH(NOLOCK) WHERE CostCenterID=50051 and SysColumnName ='CCNID53' and IsColumnInUse=1 and UserProbableValues='H')>0)
		SELECT @GRADE=ISNULL(HistoryNodeID,0) FROM COM_HistoryDetails WITH(NOLOCK) WHERE NodeID=@EmployeeID AND CostCenterID=50051 AND HistoryCCID=50053 AND (FromDate<=CONVERT(FLOAT,CONVERT(DATETIME,@PayrollDate))) AND (ToDate>=CONVERT(FLOAT,CONVERT(DATETIME,@PayrollDate)) OR ToDate IS NULL)
	ELSE
		SELECT @GRADE=ISNULL(CCNID53,0) FROM COM_CCCCDATA WITH(NOLOCK) WHERE COSTCENTERID=50051 AND NODEID=@EmployeeID
END

IF ISNULL(@GRADE,0)=0
	SET @GRADE=1
	
IF ((SELECT COUNT(ID.DocID) FROM INV_DOCDETAILS ID WITH(NOLOCK),COM_DOCCCDATA CC WITH(NOLOCK)
	WHERE ID.INVDOCDETAILSID=CC.INVDOCDETAILSID AND CC.DCCCNID53=@GRADE AND ID.COSTCENTERID=40061)<=0)
BEGIN
	SELECT 'Please check the vacation preferences for the grade' as VacationPreferencesMessage
END
ELSE
BEGIN
	SELECT distinct @ExcludeWeeklyOffsasVacation=ISNULL(TD.dcAlpha6,'NO') ,@ExcludeHolidaysasVacation=ISNULL(TD.dcAlpha7,'NO'),@VacationLeaveType=isnull(dcAlpha1,0),@VacationLeaveTypeName=C52.Name
	FROM INV_DOCDETAILS ID WITH(NOLOCK)
	JOIN COM_DOCTEXTDATA TD WITH(NOLOCK) ON ID.INVDOCDETAILSID=TD.INVDOCDETAILSID
	JOIN COM_DOCCCDATA CC WITH(NOLOCK) ON ID.INVDOCDETAILSID=CC.INVDOCDETAILSID
	JOIN COM_CC50052 C52 WITH(NOLOCK) ON C52.NodeID=TD.dcAlpha1
	WHERE   TD.tCOSTCENTERID=40061	AND CC.DCCCNID53=@GRADE 
END
--END: CHECKING GRADE

IF(@FromDate is not null and @ToDate is not null )
BEGIN			
		SELECT @INCREXC=ISNULL(INCLUDEREXCLUDE,'') FROM COM_CC50054 WITH(NOLOCK)
		WHERE  GRADEID=@GRADE AND COMPONENTID=@VacationLeaveType AND PAYROLLDATE=(SELECT MAX(PAYROLLDATE) FROM COM_CC50054  WITH(NOLOCK) WHERE CONVERT(DATETIME,PAYROLLDATE)<=CONVERT(DATETIME,@PayrollDate) AND GradeID=@Grade)
		--Start: LOADING DATES
		SELECT @STARTDATE1=CONVERT(DATETIME,@FromDate),@ENDATE1=CONVERT(DATETIME,@ToDate) 
		;WITH DATERANGE AS
		(
		SELECT @STARTDATE1 AS DT,1 AS ID
		UNION ALL
		SELECT DATEADD(DD,1,DT),DATERANGE.ID+1 FROM DATERANGE WHERE ID<=DATEDIFF("d",convert(varchar,@STARTDATE1,101),convert(varchar,@ENDATE1,101))
		)
		
		INSERT INTO @TabDatesRange
		SELECT ROW_NUMBER() OVER (ORDER BY DT) AS ID,DT AS WEEKDATE,DATENAME(DW,DT) AS DAY,0,0,0,0,'' FROM DATERANGE	--WHERE (DATEPART(DW,DT)=1 OR DATEPART(DW,DT)=7)
		--END: LOADING DATES
		
		--START: LOADING DATA BASED ON FROMDATE AND TODATE GIVEN 
		DECLARE @DATESAPPLIEDCOUNT TABLE (ID INT IDENTITY(1,1),Docdate DateTime,VoucherNo nVarchar(50),OPBalance float,CreditedDays float,TotOPDays float,FDATE DATETIME,TDATE DATETIME,NOOFDAYS Float,IsEncashDays NVARCHAR(100),EncashDays FLOAT,RJDate DATETIME,PAIDDAYS FLOAT)
		INSERT INTO @DATESAPPLIEDCOUNT
		SELECT distinct ID.Docdate,ID.VoucherNo,round(TD.dcAlpha22,2),round(dcAlpha7,2),round(TD.dcAlpha22,2)+round(dcAlpha7,2),
		--CONVERT(DATETIME,@FromDate),CONVERT(DATETIME,@ToDate)
		CONVERT(DATETIME,dcAlpha2),CONVERT(DATETIME,dcAlpha3)
		,0,ISNULL(dcAlpha16,'')
		,CASE WHEN MONTH(CONVERT(DATETIME,dcAlpha2))=MONTH(@FromDate) AND YEAR(CONVERT(DATETIME,dcAlpha2))=YEAR(@FromDate) THEN CONVERT(FLOAT,dcAlpha14) ELSE 0 END
		--,CONVERT(FLOAT,dcAlpha14) 
		,CONVERT(DATETIME,dcAlpha1) ,CONVERT(FLOAT,dcAlpha10) 
		FROM COM_DocTextData TD with(nolock)
		JOIN INV_DOCDETAILS ID with(nolock) on TD.InvDocDetailsID=ID.InvDocDetailsID
		JOIN COM_DocCCData DC with(nolock) on DC.InvDocDetailsID=TD.InvDocDetailsID
		WHERE TD.tCostCenterID=40072 AND ID.STATUSID NOT IN (372,376) AND LEN(dcAlpha2)<30 AND  LEN(dcAlpha3)<30
	AND DC.DCCCNID51=@EmployeeID  
		AND ISDATE(dcAlpha2)=1 AND  ISDATE(dcAlpha3)=1 
		AND CONVERT(DATETIME,dcAlpha2) <= CONVERT(DATETIME,@ToDate)	

		
		UNION 

		SELECT DocDate,VoucherNo,0,0,0,CONVERT(DATETIME,dcAlpha3),CONVERT(DATETIME,dcAlpha3),0,'Yes',dcAlpha15,null,0 FROM INV_DocDetails I WITH(NOLOCK)
		JOIN COM_DocCCData CC WITH(NOLOCK) ON CC.InvDocDetailsID=I.InvDocDetailsID
		JOIN COM_DocTextData T WITH(NOLOCK) ON T.InvDocDetailsID=I.InvDocDetailsID
		JOIN COM_CC50052 C52 WITH(NOLOCK) ON C52.Name=dcAlpha12 
		WHERE T.tCostCenterID=40095 AND C52.Name IN (@VacationLeaveTypeName) AND dcAlpha1='2' AND CC.DCCCNID51=@EmployeeID AND I.STATUSID NOT IN (372,376)
		
		--select * from @DATESAPPLIEDCOUNT
	   --END: LOADING DATA BASED ON FROMDATE AND TODATE GIVEN				 
	   --START: UPDATING @TabDatesRange TABLE 'COUNT' COLUMN TO 1 FROM LIST OF @DATESAPPLIEDCOUNT TABLE
	   
	   DECLARE @RC AS INT,@IC AS INT,@TRC AS INT,@DTT AS DATETIME,@DAYS Float,@ED FLOAT
	   SET @IC=1
	   	  SELECT @TRC=COUNT(*) FROM @TabDatesRange
		  WHILE(@IC<=@TRC)
		  BEGIN
			SELECT @DTT=DATE1 FROM @TabDatesRange WHERE SNO=@IC
			SET @RC=0

			IF(select COUNT(*) from @DATESAPPLIEDCOUNT WHERE CONVERT(DATETIME,@DTT) between CONVERT(DATETIME,FDATE) and CONVERT(DATETIME,TDATE) AND ISNULL(IsEncashDays,'')<>'Yes' AND RJDATE IS NULL)>0
				SELECT @RC=COUNT(*) FROM @DATESAPPLIEDCOUNT WHERE CONVERT(DATETIME,@DTT) between CONVERT(DATETIME,FDATE) and CONVERT(DATETIME,TDATE) AND ISNULL(IsEncashDays,'')<>'Yes' AND RJDATE IS NULL
			ELSE
			BEGIN
				IF(select COUNT(*) from @DATESAPPLIEDCOUNT WHERE CONVERT(DATETIME,@DTT) between CONVERT(DATETIME,FDATE) and CONVERT(DATETIME,TDATE) AND ISNULL(IsEncashDays,'')<>'Yes' AND CONVERT(DATETIME,RJDATE) <= CONVERT(DATETIME,TDATE) AND CONVERT(DATETIME,RJDATE)>CONVERT(DATETIME,@DTT) )>0
					SELECT @RC=COUNT(*) from @DATESAPPLIEDCOUNT WHERE CONVERT(DATETIME,@DTT) between CONVERT(DATETIME,FDATE) and CONVERT(DATETIME,TDATE) AND ISNULL(IsEncashDays,'')<>'Yes' AND CONVERT(DATETIME,RJDATE) <= CONVERT(DATETIME,TDATE) AND CONVERT(DATETIME,RJDATE)>CONVERT(DATETIME,@DTT) 
				ELSE IF(select COUNT(*) from @DATESAPPLIEDCOUNT WHERE CONVERT(DATETIME,@DTT) between CONVERT(DATETIME,FDATE) and CONVERT(DATETIME,TDATE) AND ISNULL(IsEncashDays,'')<>'Yes' AND CONVERT(DATETIME,RJDATE) > CONVERT(DATETIME,TDATE) AND CONVERT(DATETIME,RJDATE)>CONVERT(DATETIME,@DTT)  )>0
					SELECT @RC=COUNT(*) from @DATESAPPLIEDCOUNT WHERE CONVERT(DATETIME,@DTT) between CONVERT(DATETIME,FDATE) and CONVERT(DATETIME,TDATE) AND ISNULL(IsEncashDays,'')<>'Yes' AND CONVERT(DATETIME,RJDATE) > CONVERT(DATETIME,TDATE) AND CONVERT(DATETIME,RJDATE)>CONVERT(DATETIME,@DTT) 
			END

			SELECT @ED=SUM(ISNULL(EncashDays,0)) FROM @DATESAPPLIEDCOUNT WHERE CONVERT(DATETIME,@DTT) between CONVERT(DATETIME,FDATE) and CONVERT(DATETIME,TDATE) AND ISNULL(IsEncashDays,'')='Yes'
			UPDATE @TabDatesRange SET count=ISNULL(@RC,0) WHERE CONVERT(DATETIME,DATE1)=CONVERT(DATETIME,@DTT)
			UPDATE @TabDatesRange SET FLAG=1,NOOFDAYS=@ED WHERE CONVERT(DATETIME,DATE1)=CONVERT(DATETIME,@DTT) and ISNULL(@RC,0)>0
		  SET @IC=@IC+1
		  END
		 
		--END :UPDATING @TabDatesRange TABLE 'COUNT' COLUMN TO 1 FROM LIST OF @DATESAPPLIEDCOUNT TABLE  
		
		--START WEEKLYOFF COUNT
		-----------------------
			Declare @WEEKOFFCOUNT Table (ID INT ,WEEKDATE DateTime,DAYNAME Varchar(50),WEEKNO Int,COUNT Int,WEEKNOMANUAL Int)
			INSERT INTO @WEEKOFFCOUNT
			EXEC spPAY_GetVacationWeekoff @FromDate,@ToDATE,@EmployeeID,0,1,1
		----------------------- 
		--END WEEKLYOFF COUNT

		--START : UPDATING @DATESAPPLIEDCOUNT Table 'COUNT' COLUMN TO '3- FOR WEEKLYOFF' 
		UPDATE DATESCOUNT SET DATESCOUNT.count=3 FROM @WEEKOFFCOUNT WEEKOFFCOUNT inner join @TabDatesRange DATESCOUNT on CONVERT(DateTime,DATESCOUNT.date1)= CONVERT(DateTime,WEEKOFFCOUNT.weekdate) and WEEKOFFCOUNT.count=1
		--END : UPDATING @DATESAPPLIEDCOUNT Table 'COUNT' COLUMN TO '3- FOR WEEKLYOFF' 

		--START-- HOLIDAY COUNT
			Declare @HOLIDAYCOUNT Table (ID int Identity(1,1),WEEKDATE Nvarchar(max),Remarks nvarchar(max))
			INSERT INTO @HOLIDAYCOUNT
			EXEC spPAY_GetVacationWeekoff @FromDate,@ToDATE,@EmployeeID,1,1,1
		--END -- HOLIDAY COUNT

		--START : UPDATING @DATESAPPLIEDCOUNT Table 'COUNT' COLUMN TO  '4- FOR HOLIDAY'
			UPDATE DATESCOUNT SET DATESCOUNT.count=4 FROM @TabDatesRange DATESCOUNT 
			inner join @HOLIDAYCOUNT TD on CONVERT(DATETIME,DATESCOUNT.DATE1)=CONVERT(DATETIME,TD.WEEKDATE)
		--END : UPDATING @DATESAPPLIEDCOUNT Table 'COUNT' COLUMN TO  '4- FOR HOLIDAY'
		
		
		SET @IC=1
		SELECT @TRC=COUNT(*) FROM @TabDatesRange
		WHILE(@IC<=@TRC)
		BEGIN
			SET @ED=0
			SELECT @DTT=DATE1 FROM @TabDatesRange WHERE SNO=@IC
			SET @RC=0

			IF(select COUNT(*) from @DATESAPPLIEDCOUNT WHERE CONVERT(DATETIME,@DTT) between CONVERT(DATETIME,FDATE) and CONVERT(DATETIME,TDATE) AND ISNULL(IsEncashDays,'')<>'Yes' AND RJDATE IS NULL)>0
				SELECT @RC=COUNT(*) FROM @DATESAPPLIEDCOUNT WHERE CONVERT(DATETIME,@DTT) between CONVERT(DATETIME,FDATE) and CONVERT(DATETIME,TDATE) AND ISNULL(IsEncashDays,'')<>'Yes' AND RJDATE IS NULL
			ELSE
			BEGIN
				IF(select COUNT(*) from @DATESAPPLIEDCOUNT WHERE CONVERT(DATETIME,@DTT) between CONVERT(DATETIME,FDATE) and CONVERT(DATETIME,TDATE) AND ISNULL(IsEncashDays,'')<>'Yes' AND CONVERT(DATETIME,RJDATE) <= CONVERT(DATETIME,TDATE) AND CONVERT(DATETIME,RJDATE)>CONVERT(DATETIME,@DTT) )>0
					SELECT @RC=COUNT(*) from @DATESAPPLIEDCOUNT WHERE CONVERT(DATETIME,@DTT) between CONVERT(DATETIME,FDATE) and CONVERT(DATETIME,TDATE) AND ISNULL(IsEncashDays,'')<>'Yes' AND CONVERT(DATETIME,RJDATE) <= CONVERT(DATETIME,TDATE) AND CONVERT(DATETIME,RJDATE)>CONVERT(DATETIME,@DTT) 
				ELSE IF(select COUNT(*) from @DATESAPPLIEDCOUNT WHERE CONVERT(DATETIME,@DTT) between CONVERT(DATETIME,FDATE) and CONVERT(DATETIME,TDATE) AND ISNULL(IsEncashDays,'')<>'Yes' AND CONVERT(DATETIME,RJDATE) > CONVERT(DATETIME,TDATE) AND CONVERT(DATETIME,RJDATE)>CONVERT(DATETIME,@DTT)  )>0
					SELECT @RC=COUNT(*) from @DATESAPPLIEDCOUNT WHERE CONVERT(DATETIME,@DTT) between CONVERT(DATETIME,FDATE) and CONVERT(DATETIME,TDATE) AND ISNULL(IsEncashDays,'')<>'Yes' AND CONVERT(DATETIME,RJDATE) > CONVERT(DATETIME,TDATE) AND CONVERT(DATETIME,RJDATE)>CONVERT(DATETIME,@DTT) 
			END

			SELECT @ED=SUM(ISNULL(EncashDays,0)) FROM @DATESAPPLIEDCOUNT WHERE CONVERT(DATETIME,@DTT) between CONVERT(DATETIME,FDATE) and CONVERT(DATETIME,TDATE) AND IsEncashDays='Yes'
			IF ISNULL(@INCREXC,'')='IncludeHolidays' OR ISNULL(@INCREXC,'')='ExcludeWeeklyOffs'
				UPDATE @TabDatesRange SET FLAG=0,IncExc='EW' WHERE CONVERT(DATETIME,DATE1)=CONVERT(DATETIME,@DTT) and ISNULL(@RC,0)>0 AND COUNT=3
			ELSE IF ISNULL(@INCREXC,'')='IncludeWeeklyOffs' OR ISNULL(@INCREXC,'')='ExcludeHolidays'
				UPDATE @TabDatesRange SET FLAG=0,IncExc='EH' WHERE CONVERT(DATETIME,DATE1)=CONVERT(DATETIME,@DTT) and ISNULL(@RC,0)>0 AND COUNT=4
			ELSE IF ISNULL(@INCREXC,'')='IncludeBoth'
				UPDATE @TabDatesRange SET FLAG=1 WHERE CONVERT(DATETIME,DATE1)=CONVERT(DATETIME,@DTT) and ISNULL(@RC,0)>0
			ELSE IF ISNULL(@INCREXC,'')='ExcludeBoth'
				UPDATE @TabDatesRange SET FLAG=0,IncExc='EB' WHERE CONVERT(DATETIME,DATE1)=CONVERT(DATETIME,@DTT) and ISNULL(@RC,0)>0 AND COUNT IN (3,4)
			
			IF(ISNULL(@ED,0)>0)
			UPDATE @TabDatesRange SET NOOFDAYS=ISNULL(@ED,0),FLAG=100 WHERE CONVERT(DATETIME,DATE1)=CONVERT(DATETIME,@DTT)

		SET @IC=@IC+1
		END
		--

		
--START EXCESS DAYS CHECKING
------------------------------
	--DECLARE @CNT2 INT,@K INT,@PAIDDAYS FLOAT,@CNT3 INT,@Y INT
	--SELECT @CNT2=COUNT(*) FROM @DATESAPPLIEDCOUNT
	--SET @K=1
	--WHILE(@K<=@CNT2)
	--BEGIN

	--SET @PAIDDAYS=0 
	--DECLARE @VACDatesRange TABLE (SNO INT IDENTITY(1,1),ID INT ,DATE1 DATETIME,DAYNAME VARCHAR(50),WEEKNO INT,COUNT INT,NOOFDAYS Float,FLAG INT,IncExc varchar(5),ExcessDays INT)
	--Declare @WEEKOFFCOUNT1 Table (ID INT ,WEEKDATE DateTime,DAYNAME Varchar(50),WEEKNO Int,COUNT Int,WEEKNOMANUAL Int)
	
	--SELECT @FDATE=FDATE,@TDATE=TDATE,@PAIDDAYS=PAIDDAYS FROM @DATESAPPLIEDCOUNT WHERE ID=@K


	--		;WITH DATERANGE1 AS
	--		(
	--		SELECT @FDATE AS DT,1 AS ID
	--		UNION ALL
	--		SELECT DATEADD(DD,1,DT),DATERANGE1.ID+1 FROM DATERANGE1 WHERE ID<=DATEDIFF("d",convert(varchar,@FDATE,101),convert(varchar,@TDATE,101))
	--		)
		
	--		INSERT INTO @VACDatesRange
	--		SELECT ROW_NUMBER() OVER (ORDER BY DT) AS ID,DT AS WEEKDATE,DATENAME(DW,DT) AS DAY,0,1,0,1,'',1 FROM DATERANGE1
			
	--		--START WEEKOFF AND HOLIDAY UPDATEING IN @VACDatesRange
	--		INSERT INTO @WEEKOFFCOUNT1
	--		EXEC spPAY_GetVacationWeekoff @fdate,@TDATE,@EmployeeID,0,1,1

	--		--select * from @WEEKOFFCOUNT1
	--		UPDATE DATESCOUNT SET DATESCOUNT.count=3 FROM @WEEKOFFCOUNT1 WEEKOFFCOUNT inner join @VACDatesRange DATESCOUNT on CONVERT(DateTime,DATESCOUNT.date1)= CONVERT(DateTime,WEEKOFFCOUNT.weekdate) and WEEKOFFCOUNT.count=1
			
	--		--START-- HOLIDAY COUNT
	--			Declare @HOLIDAYCOUNT1 Table (ID int Identity(1,1),WEEKDATE Nvarchar(max),Remarks nvarchar(max))
	--			INSERT INTO @HOLIDAYCOUNT1
	--			EXEC spPAY_GetVacationWeekoff @fdate,@TDATE,@EmployeeID,1,1,1
	--		--END -- HOLIDAY COUNT

	--		--START : UPDATING @DATESAPPLIEDCOUNT Table 'COUNT' COLUMN TO  '4- FOR HOLIDAY'
	--			UPDATE DATESCOUNT SET DATESCOUNT.count=4 FROM @VACDatesRange DATESCOUNT 
	--			inner join @HOLIDAYCOUNT1 TD on CONVERT(DATETIME,DATESCOUNT.DATE1)=CONVERT(DATETIME,TD.WEEKDATE)
	--		--END : UPDATING @DATESAPPLIEDCOUNT Table 'COUNT' COLUMN TO  '4- FOR HOLIDAY'
	--		--END WEEKOFF AND HOLIDAY UPDATEING IN @VACDatesRange
			
	--		SET @IC=1
	--		SELECT @TRC=COUNT(*) FROM @VACDatesRange
	--		WHILE(@IC<=@TRC)
	--		BEGIN

	--			SELECT @DTT=DATE1 FROM @VACDatesRange WHERE id=@IC

	--			IF ISNULL(@INCREXC,'')='IncludeHolidays' OR ISNULL(@INCREXC,'')='ExcludeWeeklyOffs'
	--				UPDATE @VACDatesRange SET FLAG=0,IncExc='EW',ExcessDays=0 WHERE CONVERT(DATETIME,DATE1)=CONVERT(DATETIME,@DTT)  AND COUNT=3
	--			ELSE IF ISNULL(@INCREXC,'')='IncludeWeeklyOffs' OR ISNULL(@INCREXC,'')='ExcludeHolidays'
	--				UPDATE @VACDatesRange SET FLAG=0,IncExc='EH',ExcessDays=0 WHERE CONVERT(DATETIME,DATE1)=CONVERT(DATETIME,@DTT)  AND COUNT=4
	--			ELSE IF ISNULL(@INCREXC,'')='IncludeBoth'
	--				UPDATE @VACDatesRange SET FLAG=1 WHERE CONVERT(DATETIME,DATE1)=CONVERT(DATETIME,@DTT) 
	--			ELSE IF ISNULL(@INCREXC,'')='ExcludeBoth'
	--				UPDATE @VACDatesRange SET FLAG=0,IncExc='EB',ExcessDays=0 WHERE CONVERT(DATETIME,DATE1)=CONVERT(DATETIME,@DTT) AND COUNT IN (3,4)

	--		SET @IC=@IC+1
	--		END
			
	--		SELECT @CNT3=COUNT(*) FROM @VACDatesRange
	--		SET @Y=1
	--		WHILE(@Y<=@CNT3)
	--		BEGIN
	--			IF(@PAIDDAYS>0 AND (SELECT COUNT(*) FROM @VACDatesRange WHERE id=@Y AND FLAG=1 AND count>=1 and isnull(IncExc,'')='' )>0)
	--			BEGIN
	--				UPDATE @VACDatesRange SET ExcessDays=0 WHERE id=@Y
	--				SET @PAIDDAYS=@PAIDDAYS-1
	--			END

	--		SET @Y=@Y+1
	--		END

	--		--SELECT * FROM @VACDatesRange

	--		UPDATE T SET FLAG=0,COUNT=0 FROM @TabDatesRange T 
	--		JOIN @VACDatesRange D ON D.DATE1=T.DATE1
	--		WHERE T.FLAG=1 AND T.count>=1 and isnull(T.IncExc,'')='' AND D.EXCESSDAYS=1

	--		delete from  @VACDatesRange
	--		delete from @WEEKOFFCOUNT1
	--		delete from @WEEKOFFCOUNT1
	--SET @K=@K+1
	--END
------------------------------
--END EXCESS DAYS CHECKING

UPDATE @DATESAPPLIEDCOUNT SET NOOFDAYS=(SELECT COUNT(*) FROM @TabDatesRange WHERE FLAG=1 AND count>=1 and isnull(IncExc,'')='') WHERE IsEncashDays<>'Yes'	--COUNT=1)
--UPDATE @DATESAPPLIEDCOUNT SET NOOFDAYS=(SELECT COUNT(*) FROM @TabDatesRange WHERE FLAG=1 AND count>=1 and isnull(IncExc,'')='')--COUNT=1)

IF EXISTS(SELECT SNO FROM @TabDatesRange WHERE FLAG=100)
	UPDATE @DATESAPPLIEDCOUNT SET NOOFDAYS=(SELECT SUM(NOOFDAYS) FROM @TabDatesRange WHERE FLAG=100) WHERE IsEncashDays='Yes'

SELECT @MWKOFFS=COUNT(*) FROM @TabDatesRange WHERE convert(DATETIME,date1) between CONVERT(DATETIME,@FromDate) and CONVERT(DATETIME,@ToDate) and flag=1 and COUNT=3 
SELECT @MHDAYS=COUNT(*) FROM @TabDatesRange WHERE convert(DATETIME,date1) between CONVERT(DATETIME,@FromDate) and CONVERT(DATETIME,@ToDate) and flag=1 and COUNT=4

--select * from @DATESAPPLIEDCOUNT
IF(@RptMode=0)
BEGIN
	--SELECT *,@MWKOFFS MWeeklyoff,@MHDAYS MHolidays From @DATESAPPLIEDCOUNT 
	--set @LeavesTakenOP=(SELECT  SUM(ISNULL(NOOFDAYS,0)) FROM @DATESAPPLIEDCOUNT )
	set @LeavesTakenOP=ISNULL((SELECT TOP 1 NOOFDAYS FROM @DATESAPPLIEDCOUNT  WHERE IsEncashDays<>'Yes'),0)
	set @LeavesTakenEncash=ISNULL((SELECT TOP 1 ISNULL(NOOFDAYS,0) FROM @DATESAPPLIEDCOUNT  WHERE IsEncashDays='Yes'),0)
	set @LeavesTakenEncash+= ISNULL((SELECT TOP 1 ISNULL(EncashDays,0) FROM @DATESAPPLIEDCOUNT  WHERE IsEncashDays<>'Yes' ORDER BY ISNULL(EncashDays,0) DESC),0)
	--set @LeavesTakenEncash=(SELECT TOP 1 NOOFDAYS FROM @DATESAPPLIEDCOUNT  WHERE IsEncashDays='Yes')
END
ELSE
BEGIN
	DECLARE @RPTNOOFDAYS FLOAT
	SELECT @RPTNOOFDAYS=NOOFDAYS From @DATESAPPLIEDCOUNT
	RETURN @RPTNOOFDAYS
END

--select ISNULL(@LeavesTakenOP,0),ISNULL(@LeavesTakenEncash,0)
  

END					
END

----spPAY_GetVacationLeavesInfoNew
--'01-AUG-2023',	'31-AUG-2023',	928,1,1,0,0,0
GO
